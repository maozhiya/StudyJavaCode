package Study.Day28;

/**
 * @author Li
 */
public interface JumpMom {
    /*
    注：JDK 1.8 以后，接口里可以有静态方法和方法体了。
    注：JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为"默认方法"，默认方法使用 default 关键字修饰。
    注：JDK 1.9 以后，允许将方法定义为 private，使得某些复用的代码不会把方法暴露出去。

    接口有以下特性：
        接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。
        接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。
        接口中的方法都是公有的。

    注意以下规则：
        类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。
        类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。
        如果实现接口的类是抽象类，那么就没必要实现该接口的方法。

    实现接口的时候，也要注意一些规则：
        一个类可以同时实现多个接口。
        一个类只能继承一个类，但是能实现多个接口。
        一个接口能继承另一个接口，这和类之间的继承比较相似。

     标记接口
        最常用的继承接口是没有包含任何方法的接口。
        标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。
        标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。

    没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：
        建立一个公共的父接口：
            正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。
        向一个类添加数据类型：
            这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。
    */
}
