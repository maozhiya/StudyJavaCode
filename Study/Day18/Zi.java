package Study.Day18;

/**
 * @author Li
 */

// 新产生的类称为子类或派生类
/*
    继承是面向对象的三大特征之一
*   继承和现实生活中的“继承”的相似之处是保留一些父辈的特性，从而减少代码冗余，提高程序运行效率
*   子类中，不仅包含父类的属性和方法，还可以增加新的属性和方法
*   Java 中的继承就是在已经存在类的基础上进行扩展，从而产生新的类

    Java 与 C++ 定义继承类的方式十分相似
        Java 用关键字 extends 代替了 C++ 中的冒号(:)
        在 Java 中, 所有的继承都是公有继承, 而没有 C++ 中的私有继承和保护继承
    类的继承不改变类成员的访问权限
    也就是说，如果父类的成员是公有的、被保护的或默认的，它的子类仍具有相应的这些特性，并且子类不能获得父类的构造方法。

    Java 语言摒弃了 C++ 中难以理解的多继承特征
    即 Java 不支持多继承，只允许一个类直接继承另一个类，即子类只能有一个直接父类，extends 关键字后面只能有一个类名\

    介绍 Java 的单继承时，可能会说 Java 类只能有一个父类，严格来讲，这种说法是错误的
    应该是一个类只能有一个直接父类，但是它可以有多个间接的父类

    使用继承的注意点：
        子类一般比父类包含更多的属性和方法。
        父类中的 private 成员在子类中是不可见的，因此在子类中不能直接使用它们。
        父类和其子类间必须存在“是一个”即“is-a”的关系，否则不能用继承。但也并不是所有符合“is-a”关系的都应该用继承。例如，正方形是一个矩形，但不能让正方形类来继承矩形类，因为正方形不能从矩形扩展得到任何东西。正确的继承关系是正方形类继承图形类。
        Java 只允许单一继承（即一个子类只能有一个直接父类），C++ 可以多重继承（即一个子类有多个直接父类）。

     继承的优缺点:

    在面向对象语言中，继承是必不可少的、非常优秀的语言机制，它有如下优点：
        实现代码共享，减少创建类的工作量，使子类可以拥有父类的方法和属性。
        提高代码维护性和可重用性。
        提高代码的可扩展性，更好的实现父类的方法。

    自然界的所有事物都是优点和缺点并存的，继承的缺点如下：
        继承是侵入性的。只要继承，就必须拥有父类的属性和方法。
        降低代码灵活性。子类拥有父类的属性和方法后多了些约束。
        增强代码耦合性（开发项目的原则为高内聚低耦合）。当父类的常量、变量和方法被修改时，需要考虑子类的修改，有可能会导致大段的代码需要重构。

* */

/*
    格式:
        修饰符 class class_name(son) extends extend_class(father) {
        // 类的主体
    }
* */

public class Zi extends Fu {
    public void method() {
        System.out.println("method 方法被调用");
    }
}
